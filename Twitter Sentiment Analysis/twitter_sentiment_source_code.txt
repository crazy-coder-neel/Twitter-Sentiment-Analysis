import numpy as np
import string
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer     # converting text data to numerical data
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
print(stopwords.words("english"))       #these are the words which dont add much meaning/importance to our sentence
df=pd.read_csv("Twitter_Data.csv")
df
#handling missing values if any
df.isnull().sum()
plt.figure(figsize=(25,25))
sns.heatmap(df.isnull())
updated_data=df.dropna()
print(updated_data)
plt.figure(figsize=(25,25))
sns.heatmap(updated_data.isnull())
# counting the no of positive (+1), negative(-1) and neutral(0) tweets
a=[]
a=updated_data["category"].value_counts()
pos=a[1]
neu=a[0]
neg=a[-1]

print(pos)
print(neu)
print(neg)
print(a)
# 162969
rows=updated_data.shape[0]
classes=["Positive Sentiment","Neutral Sentiment","Negative Sentiment"]
class_weightage=[pos,neu,neg]

border={"linewidth":2,"width":1,"edgecolor":"k"}

plt.pie(class_weightage,labels=classes,autopct="%0.1f%%",shadow=True,wedgeprops=border)
plt.show()
# stemming is the process of reducing the original word to its root word eg "studies", "studied","studying" :- studi
data=updated_data.where((pd.notnull(df))," ")
x=data["clean_text"]
y=data["category"]
print(x)
print(y)
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=3)
feature_extraction=TfidfVectorizer(min_df=1,stop_words="english",lowercase=True)
x_train_features=feature_extraction.fit_transform(x_train)
x_test_features=feature_extraction.transform(x_test)

y_train=y_train.astype("int")
y_test=y_test.astype("int")
model=LogisticRegression(max_iter=1000)
model.fit(x_train_features,y_train)
prediction_on_training_data=model.predict(x_train_features)
accuracy_on_training_data=accuracy_score(y_train,prediction_on_training_data)
print(accuracy_on_training_data)
prediction_on_testing_data=model.predict(x_test_features)
accuracy_on_testing_data=accuracy_score(y_test,prediction_on_testing_data)
print(accuracy_on_testing_data)
input_sentiment=[]
for i in range(1):
    x=input("Enter the message:")
    input_sentiment.append(x)
input_data_features=feature_extraction.transform(input_sentiment)

tweet=model.predict(input_data_features)
if(tweet[0]==1):
    print(input_sentiment)
    print("Positive Sentiment")
elif(tweet[0]==0):
    print(input_sentiment)
    print("Neutral Sentiment")
elif(tweet[0]==-1):
    print(input_sentiment)
    print("Negative Sentiment")